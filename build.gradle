plugins {
	id 'biz.aQute.bnd.builder' version '3.3.0'
}

sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url "https://repo.dotcms.com/artifactory/libs-release" }
}
configurations {
	osgiLibs
}

dependencies {
	compile('com.dotcms:dotcms:21.05') { transitive = true }
//	provided('javax.servlet:javax.servlet-api:3.1.0')
	compile('org.twitter4j:twitter4j-core:4.0.7')
}

import java.util.jar.*
jar.baseName = 'com.dotcms.twitter'
/////////////////////////
//Plugin jar
/////////////////////////
jar {
	manifest {
		attributes (
				'Bundle-Vendor': 'dotCMS',
				'Bundle-Description': 'dotCMS - Twitter Provider',
				'Bundle-DocURL': 'https://dotcms.com/',
				'Bundle-Activator': 'com.aquent.viewtools.TwitterToolActivator',
				'Bundle-ClassPath' : "${classPathLibraries()}",
				'DynamicImport-Package': '*',
				'Import-Package': '''
                    javax.annotation;version=0.0.0,
                    *;version=0.1
                '''
		)
	}
}

task cleanLibFiles(type: Delete) {
	delete fileTree("src/main/resources/libs").matching {
		include "**/*"
	}
}

task copyToLib(type: Copy) {
	into "src/main/resources/libs"
	from configurations.osgiLibs
}

copyToLib.dependsOn cleanLibFiles
compileJava.dependsOn copyToLib


jar.finalizedBy 'fragmentJar'

/**
 * Searches for jars inside the src/main/resources/libs folder, the returned list is used for the
 * Bundle-ClassPath attribute.
 * @return String with the list of jars inside the src/main/resources/libs folder or empty if the
 * folder does not exist or it is empty.
 */
def classPathLibraries() {

	def bundleClassPath = "";
	fileTree("src/main/resources/libs").filter { it.isFile() }.each { bundleClassPath += "libs/" + it.name + "," }

	if (bundleClassPath != "") {
		bundleClassPath = '.,' + bundleClassPath
	}

	return bundleClassPath
}

/////////////////////////
//Fragment jar
/////////////////////////

ext {
	bundleName = "OSGI 3rd Party library fragment"
	bundleDescription = "dotCMS - OSGI 3rd Party library fragment"
	fragmentHost = "system.bundle; extension:=framework"
	bundleSymbolicName = "" //Auto generated based on the plugin jar
	bundleVersion = "" //Auto generated based on the plugin jar
	importPackage = "" //Auto generated based on the plugin jar
	bundleManifestVersion = "" //Auto generated based on the plugin jar
	bundleDocURL = "" //Auto generated based on the plugin jar
	bundleVendor = "" //Auto generated based on the plugin jar
}

/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
	return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
	doFirst {
		File file = configurations.baseline.singleFile
		JarFile jar = new JarFile(file)
		Attributes manifest = jar.getManifest().getMainAttributes()
		bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
		bundleVersion = "${manifest.getValue('Bundle-Version')}"
		importPackage = "${manifest.getValue('Import-Package')}"
		bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
		bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
		bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
	}
}

task fragmentJar(type: Jar) {

	doFirst {
		//Setting the fragment jar name
		baseName = jar.baseName
		archiveName = "${baseName}.fragment-${version}.jar"
		importPackage = fixVersionNumber(importPackage)

		manifest {
			attributes (
					'Bundle-Name': "${bundleName}",
					'Bundle-Description': "${bundleDescription}",
					'Bundle-Vendor': "${bundleVendor}",
					'Bundle-Version': "${version}",
					'Bundle-SymbolicName': "${baseName}.fragment",
					'Bundle-ManifestVersion': "${bundleManifestVersion}",
					'Bundle-DocURL': "${bundleDocURL}",
					'Fragment-Host': "${fragmentHost}",
					'Export-Package': "${importPackage}"
			)
		}
	}
}
fragmentJar.dependsOn 'readManifesttAttributes'

task wrapper(type: Wrapper) {
	gradleVersion = '4.2'
}
